This project has thick client pentesting checklist using which you can test any thick client applications.

Information Gathering Tools:-
	1. CFF Explorer.
	2. Sysinternal tools (TCP View, Promon).
	3. ProcMon Tool:-
		Analyzing malware samples with procmon tool:-

			1. Open the procmon tool, set the tool in the capture mode.
			2. Then open your .exe file and navigate to all the tabs. Wait for sometime and close the .exe file.
			3. Stop the capture mode, save the events to your desired format .PML,.csv,.xml file.
			4. Create a filter to view only events relevant to malware sample(your application). Filter by the process name say for example 'dvta.exe'


			Five categories of events are captured at anytime.
				1. Registry activity 			- When registry keys and values are created, modified and deleted.
				2. File system activity 		- When files and folders are created, accessed and deleted.
				3. Network activity 			- Indicating outbound connections made by processes.
				4. Process and thread activity - Records when process and thread activity are created or exited.
				5. Profiling events 			- How cpu was used by the process.

[]

Get more info about the events by double clicking the event,or select the event and click event properties.

View the current process tree of an event by clicking the button 'tree'. This is helpful to identify if the target process creates any child process.
Filter the events by clicking on filter button.
Highlight the events by clicking on 'pencil'.

GUI Testing:-
	1. To activate disabled functionalities, we can use dnspy to decompile the application and active the necessary functionalities.
dnSPy tool:-
	1. Find exact location of button that is disabled and patch the binary in such a way that button is enabled.
	2. IL → Intermediate Language(which is assembly language).
	
File Testing:-
	4. Test for file & Content Manipulation:-
		Framework Backdooring:-
			Framework backdooring involves manipulating the application's use of frameworks or libraries to introduce malicious behaviour. "Framework backdooring" refers to the technique of injecting malicious code or backdoors into the frameworks or libraries used by a thick client application.
		DLL Preloading:-
			DLL (Dynamic Link Library) preloading, also known as DLL hijacking or DLL planting, is a technique used to exploit the way Windows-based applications load dynamic link libraries. When a Windows application is launched, it looks for required DLL files in specific locations, such as the application's directory, system directories, or directories listed in the system's PATH environment variable. If an attacker can place a malicious DLL with the same name as one of the DLLs expected by the application in one of these directories, the application may inadvertently load the malicious DLL instead of the legitimate one.
			
		Race Conditions:-
			Race conditions occur in software when the outcome of a program depends on the sequence or timing of events, and these events are not properly synchronized. This can lead to unpredictable behavior or security vulnerabilities, particularly in multi-threaded or concurrent applications.
			
			Essentially, a race condition arises when two or more threads or processes access shared resources in an unsynchronized manner, and the final outcome depends on the order or timing of their execution.
			
			Testing for race conditions in thick client applications involves creating scenarios where multiple threads or processes interact with shared resources concurrently and then observing the behavior to identify potential race conditions.
			
		Files and content Replacement:-
			Testing for "Files & Content Replacement" involves verifying how a thick client application handles situations where files or content are replaced or modified either intentionally or unintentionally.
			
		Exported Functions:-
			Exported functions, in the context of software development, are functions or procedures within a dynamic-link library (DLL) or executable (EXE) file that are made available for use by other modules or programs. When a function is marked as exported, it means that it is accessible to other parts of the program or to external programs for use.
			
			Dependency Walker (depends.exe): Dependency Walker is a tool that allows you to view the exported functions of DLLs (Dynamic Link Libraries) and EXEs (executables). You can use this tool to open the thick client application's executable file (EXE) and analyze its dependencies, including the exported functions of linked libraries. Dependency Walker can help you identify which functions are exposed by the application and its dependencies.
			
		Try to call exported functions without authentication:-
			When testing thick client applications, attempting to use exported functions without authentication can help uncover security vulnerabilities related to improper access controls or insecure configurations. Here's a general approach to testing for such vulnerabilities:
				
				1. Identify Exported Functions: Use tools like Dependency Walker, PE Explorer, or static analysis tools to identify the exported functions 		within the thick client application or its associated DLLs. This will give you a list of functions that are potentially accessible.
				2. Analyze Function Signatures: Review the signatures and descriptions of the exported functions to understand their purpose and potential impact on the application's behavior.
				3. Manual Testing:Attempt to call the identified exported functions directly from your testing environment without providing any authentication credentials.
				
		Registry Testing:-
			1. Registry → It is like a big database which stores important settings & configuration of windows OS and software's associated with it.
			2. All programs go to registry(a central hub) and retrieve the information they needed inorder to function properly.
			3. Registry follows hierarchal structure(key-value pairs).
			4. Windows & programs constantly read from and write to registry.
			
		HKEY_CLASSES_ROOT → Contains info about registered applications.(HKCR)
		HKEY_CURRENT_USER → Contains info about current logged in user.(HKCU)
		HKEY_USERS → Contains info about settings & Configuration related to each user on the system.(HKU)
		HKEY_LOCAL_MACHINE → Contains info about local computer.(HKLM)
		HKEY_CURRENT_CONFIG → Contains info about current hardware config of system.(HKCC)
		HKEY → Handle to registry key.
		
	Check for read access of registry key:-
	Impact:- Exposure of sensitive information.
	Remediation:-
		1. Follow the principle of least privilege and carefully manage permissions for registry keys associated with thick client applications.
		2. Access should be given to users/groups that require it for legitimate purposes.
		3. Encrypt sensitive data stored into registry.
		
	Check for write access in registry keys:-
	Impact:-
		1. Data integrity → Tampering.
		2. Privilege escalation.
		
Assembly Testing:- An assembly refers to compiled unit of code that contains metadata about types and members defined with it. Assemblies can be EXE's and DLL's.

Address Space Layout Randomization(ASLR):
	It is a security feature implemented in Various OS to enhance the security of OS.ASLR works by randomizing the memory addresses where system executables and libraries are loaded, making it more difficult for attackers to predict the locations of specific functions or code snippets in memory. When ASLR flag is enabled, it prevents attacker from reading/exploiting address space locations in memory.
	Impact:- Memory related attacks such as buffer-overflows and code injection attacks.
	
Data Execution Prevention:-
	Data Execution Prevention (DEP) on the other hand prevents certain memory sectors, e.g. the stack and heap, from being executed. DEP separates executable and non-executable memory space. When DEP finds executable data under non-executable memory space, it terminates execution of malicious code placed by the hacker.
Notes:-
	This is simply a matter of using the right linker option so it flips a bit in the executable header. The Microsoft linker options are /NXCOMPAT (DEP) and /DYNAMICBASE (ASLR).
	
safeSEH:-
	SafeSEH protect applications from certain types of buffer overflow attacks by validating exception handlers. When an application encounters an exception (such as a memory access violation), the operating system looks for an exception handler to deal with the exception.
	Remediation:- set /SAFESEH linker option during compilation time.
	
strong naming:-
	Verify strong naming in assembly testing for thick client applications is like checking identity and integrity of  software component to ensure that it comes from a trusted source that it hasn't been tampered with.  It comes under "Code signing" category. 
	Strong naming in the context of .NET refers to the practice of signing an assembly with a cryptographic key. The signature is then embedded in the assembly itself.
	Impact:-
		When the strong naming flag is not set, the assembly becomes vulnerable to tampering, as attackers can modify the assembly without detection, potentially leading to unauthorized modifications, code execution exploits, or other security breaches.
	
ControlFlowGuard:-
	CFG is a security feature designed to protect the application against certain types of attacks such as code injection. Generally programs are executed in predefined order flow. If CFG flag is not enabled then attacker can change the program execution flow and make his malicious code execute.
Remediation:- set /guard:cf at source code level
	Reference:- https://learn.microsoft.com/en-us/cpp/build/reference/guard-enable-control-flow-guard?view=msvc-170
	
HighEntropyVA:-
	High EntropyVA flag is an advanced security feature that randomizes the memory layout of critical application components, making it significantly harder for attackers to predict their locations and exploit memory-based vulnerabilities.
Remediation:- set/HIGHENTROPYVA at source code level.
	Reference:- https://learn.microsoft.com/en-us/cpp/build/reference/highentropyva-support-64-bit-aslr?view=msvc-170